#pragma kernel CSMain

// textures
RWTexture2D<float4> Texture;
Texture2D<float4> Source;

// variables
float Radius;
float FogStrength;
bool Repeat;
bool Invert;
bool Outline;

// matrixes
float4x4 CamToWorld;
float4x4 CamInverseProjection;

// ray
struct Ray {
    float3 origin;
    float3 direction;
};

// sphere distance estimator
float DESphere(float3 p, float r) {
	return length(p) - r;
}

// from https://iquilezles.org/www/articles/distfunctions/distfunctions.htm
float3 RepeatSpace(float3 p) {
	float a = 3;
	float x = abs(p.x - a / 2) % a - a / 2;
	float y = abs(p.y - a / 2) % a - a / 2;
	float z = abs(p.z - a / 2) % a - a / 2;
	return float3(x, y, z);
}

// the distance to the sphere
float DEMain(float3 pos) {
	if (Repeat) { pos = RepeatSpace(pos); }; // repeat space
	float dst = DESphere(float3(0, 0, 0) - pos, Radius); // calculate distance
	if (Invert) { dst *= -1; }; // invert
	return dst;
}

// from http://blog.three-eyed-games.com/2018/05/03/gpu-ray-tracing-in-unity-part-1/
Ray CreateRay(float3 origin, float3 direction) {
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

// from http://blog.three-eyed-games.com/2018/05/03/gpu-ray-tracing-in-unity-part-1/
Ray CreateCameraRay(float2 uv) {
    float3 origin = mul(CamToWorld, float4(0, 0, 0, 1)).xyz;
    float3 direction = mul(CamInverseProjection, float4(uv, 0, 1)).xyz;
    direction = mul(CamToWorld, float4(direction, 0)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}

// march along the ray
Ray March(Ray ray, float distance) {
	ray.origin += ray.direction * distance;
	return ray;
}

// main function
[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
	
	// add the background
	Texture[id.xy] = Source[id.xy];
	
	// convert into range [-1, 1]
	float w, h; Texture.GetDimensions(w, h);
	float2 uv = id.xy / float2(w, h) * 2 - 1;
	
	// create the ray
	Ray ray = CreateCameraRay(uv);
	float ol = 0; // outline
	float3 eye = ray.origin; // camera position
	float dst = 0; // current distance
	float fog = 0;
	
	// marching
	
	ray = March(ray, 1);
	
	for(uint i = 0; i < 1000; i++) {
		
		// calculate distance
		dst = DEMain(ray.origin);
		
		// ray too far away
		if (length(ray.origin - eye) > 100) {
			fog = length(ray.origin - eye) / 40; // calculate fog
			break;
		}
		
		// ray hits an object
		if (dst < 0.0001) {
			fog = length(ray.origin - eye) / 40; // calculate fog
			Texture[id.xy] = float4(0.8, 0.2, 0.2, 0); // add color
			break;
		}
		
		// outline
		if (dst < 0.01) {
			ol += dst * 2;
		}
		
		// repeat
		ray = March(ray, dst);
	}
	
	// add outline
	if (Outline) {
		Texture[id.xy] += ol;
	};
	
	// add fog
	Texture[id.xy] *= (1 - (fog * FogStrength));
}
