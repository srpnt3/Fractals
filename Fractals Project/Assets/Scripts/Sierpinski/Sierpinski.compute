#pragma kernel CSMain

// textures
RWTexture2D<float4> Texture;
Texture2D<float4> Source;

// variables
float N;
int Iterations;
float Pos;
float Size;

bool InFractal(float x, float y) {
	for (int i = 0; i < Iterations; i++) {
		x *= N; y *= N; // scale to next level
		if (abs(x % N - Pos) < Size && abs(y % N - Pos) < Size) // check
			return false;
	}
	return true;
}

// main method
[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID) {

	// add the background
	Texture[id.xy] = Source[id.xy];
	
	float w, h; Texture.GetDimensions(w, h);
	float ox = (w - min(w, h)) / 2; // calculate the x offset
	float oy = (h - min(w, h)) / 2; // calculate the y offset
	float s = 1 / min(w, h); // calculate scale
	float x = (id.x - ox) * s, y = (id.y - oy) * s; // center and normalize coordinates
	
	if (min(x, y) > 0 && max(x, y) < 1) { // check boundaries 
		if (InFractal(x, y)) {
			Texture[id.xy] = float4(0.8, 0.2, 0.2, 1);
		}
	}
}