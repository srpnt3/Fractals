#pragma kernel CSMain

// textures
RWTexture2D<float4> Texture;
Texture2D<float4> Source;

// variables
float N;
int Iterations;

// constants
static const float size = 0.50001; // hole size

bool InFractal(float x, float y) {
	x *= N; y *= N; // scale 
	for (int i; i < Iterations; i++) {
		if (abs((x - size) % N - 1) < size && abs((y - size) % N - 1) < size) // check
			return false;
		x *= N; y *= N; // scale to next level
	}
	return true;
}

// main method
[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID) {

	// add the background
	Texture[id.xy] = Source[id.xy];
	
	float w, h; Texture.GetDimensions(w, h);
	float ox = 0, oy = 0; // calculate the offset
	if (w > h) ox = (w - h) / 2;
	if (h > w) oy = (h - w) / 2;
	float x = id.x - ox, y = id.y - oy; // center it
	float s = 1 / min(w, h);
	
	if (x / y > 0 && x < min(w, h) && y < min(w, h)) { // check boundries
		if (InFractal(x * s, y * s)) {
			Texture[id.xy] = float4(0.8, 0.2, 0.2, 1);
		}
	}
}