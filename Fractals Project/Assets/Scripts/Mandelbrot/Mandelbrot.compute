#pragma kernel CSMain

// textures
RWTexture2D<float4> Texture;
Texture2D<float4> Source;

// variables
bool Julia;
float4 Area;
float2 C;
int Iterations;
RWStructuredBuffer<float3> Colors;

// PI
static const float PI = 3.14159265;

// complex multiplication
double2 Multiply(double2 a, double2 b) {
	double2 x;
	x[0] = (a[0] * b[0]) - (a[1] * b[1]);
	x[1] = (a[0] * b[1]) + (a[1] * b[0]);
	return x;
}

// the math
int Iterate(double2 c) {
	double2 z = Julia ? c : double2(0, 0);
	
	for (int i = 0; i < Iterations; i++) {
		z = Multiply(z, z) + (Julia ? C : c); // z = z^2 + c
		if (length(z) > 2) { // bailout
			return i;
		}
	}
	return Iterations;
}

// convert screen coord to imaginary coords
double2 ConvertCoords(double2 c) {
	double w, h; Texture.GetDimensions(w, h);
	double2 z;
	z[0] = c[0] / (w / Area[2]) + Area[0];
	z[1] = c[1] / (h / Area[3]) - Area[1];
	return z;
}

// main method
[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID) {

	// add the background
	Texture[id.xy] = Source[id.xy];

	// coloring
	float i = Iterate(ConvertCoords(double2(id.x, id.y))); // number of iterations
	if (i != Iterations) {
		float a = (cos(i / 10 + PI) + 1) / 2; // normalize the itaration with cos
		uint c, s; Colors.GetDimensions(c, s); // get the size of the array
		int x = a * (c - 1); // calculate the index
		float3 clr = Colors[x]; // get the corresponding color
		Texture[id.xy] = float4(clr, 1); // apply
	}
}