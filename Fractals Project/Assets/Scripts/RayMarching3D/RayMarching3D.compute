#pragma kernel CSMain

// textures
RWTexture2D<float4> Texture;
Texture2D<float4> Source;

// matrixes
float4x4 CamToWorld;
float4x4 CamInverseProjection;

// variables
float3 Sun;
float Shadows;

// constants
static const int steps = 400;
static const float epsilon = 0.0001;
static const float PI = 3.14159265f;

// structs
struct Ray { float3 position; float3 direction; };
struct MarchResult { bool hit; float3 position; float3 color; float ao; float fog; };

// sphere distance estimator
float DESphere(float3 p, float r) {
	return length(p) - r;
}

// box distance estimator from https://iquilezles.org/www/articles/distfunctions/distfunctions.htm
float DEBox(float3 p, float3 s) {
	float3 q = abs(p) - s;
	return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);
}

// plane distance estimator
float DEPlane(float p) {
	return abs(p);
}

// the distance to the scene
float DE(float3 pos) {
	
	const float l = 6;
	float d[l] = {
		DESphere(float3(0, .3, -.5) - pos, 1),
		DESphere(float3(1, 1, 2) - pos, .5),
		DESphere(float3(-2, 0, .5) - pos, .7),
		DEBox(float3(0, -1, 0) - pos, float3(10, 0, 10)),
		DEBox(float3(3, 0, 3) - pos, float3(.5, .5, .5)),
		DEPlane(1 + pos.y)
	};
	
	float dMin = d[0];
	for(int i = 1; i < l; i++) {
		if (d[i] < dMin) {
			dMin = d[i];
		}
	}
	
	return max(dMin, -DESphere(float3(3, 0, 3) - pos, .65));
}

Ray CreateRay(float3 position, float3 direction) {
    Ray ray;
    ray.position = position;
    ray.direction = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv) {
    float3 position = mul(CamToWorld, float4(0, 0, 0, 1)).xyz;
    float3 direction = mul(CamInverseProjection, float4(uv, 0, 1)).xyz;
    direction = mul(CamToWorld, float4(direction, 0)).xyz;
    direction = normalize(direction);
    return CreateRay(position, direction);
}

// estimate surface normals
float3 EstimateNormal(float3 p) {
    float x = DE(float3(p.x+epsilon,p.y,p.z)) - DE(float3(p.x-epsilon,p.y,p.z));
    float y = DE(float3(p.x,p.y+epsilon,p.z)) - DE(float3(p.x,p.y-epsilon,p.z));
    float z = DE(float3(p.x,p.y,p.z+epsilon)) - DE(float3(p.x,p.y,p.z-epsilon));
    return normalize(float3(x,y,z));
}

// skybox
float3 Skybox(float3 direction) {
	float x = acos(dot(direction, Sun)) / PI;
	return float3(0.5, 0.2, 0.4) * x;
}

// cast a ray and return the result
MarchResult March(Ray ray) {
	MarchResult res;
	res.hit = false;
	res.color = Skybox(ray.direction);
	res.ao = 1;
	float d;
	float3 eye = ray.position;
	
	for (float s = 0; s < steps; s++) {
		if (length(eye - ray.position) > 1000) break; // to far away
		d = DE(ray.position);
		if (d < epsilon) {
			res.hit = true;
			res.color = float3(0.8, 0.2, 0.2);
			res.ao = 1 - (s / steps);
			break;
		}
		ray.position += ray.direction * d;
	}
	res.position = ray.position;
	res.fog = 1 / (length(eye - ray.position) / 10 + 1);
	return res;
}

// soft shadows
float Shade(float3 pos) {
	Ray ray = CreateRay(pos, -Sun);
	float m = 1.0;
	float3 eye = pos;
	
	for (int s = 0; s < steps; s++) {
		if (length(eye - ray.position) > 1000) break; // to far away
		float d = DE(ray.position); // calculate distance
		if (d < epsilon) return 0.1; // hit
		m = min(m, Shadows * d / length(eye - ray.position) + 0.1); // calculate min distance
		ray.position += ray.direction * d; // march
	}
	return m;
}

// main method
[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
	
	// convert into range [-1, 1]
	float w, h; Texture.GetDimensions(w, h);
	float2 uv = id.xy / float2(w, h) * 2 - 1;
	
	// create and march ray
	Ray ray = CreateCameraRay(uv);
	MarchResult res = March(ray);
	
	// display results
	float3 color = Skybox(ray.direction);
	
	if (res.hit) {
		float shade1 = Shade(res.position + EstimateNormal(res.position) * epsilon * 10);
		float shade2 = res.fog * res.ao;
		float3 object = float3(0.8, 0.2, 0.2) * shade1;
		color = color * (1 - shade2) + object * shade2;
	}
	
	Texture[id.xy] = Source[id.xy] + float4(color, 1);
}
